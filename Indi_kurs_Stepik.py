# 1
# Напишите программу, которая на вход получает координаты двух клеток шахматной доски и выводит сообщение о том, являются ли эти клетки одного цвета. Столбцы на шахматной доске обозначаются английскими строчными буквами.
# Программа должна выводить YES, когда клетки одного цвета, NO - разного. Гарантируется, что значение колонок это латинские буквы abcdefgh, а строки это символы цифр от 1-8

cl1, cl2 = input(), input()
# Извлекаем из каждой клетки координату столбца (букву) и строки (цифру).
column1, row1 = cl1[0], int(cl1[1])
column2, row2 = cl2[0], int(cl2[1])

# Вычисляем сумму координат каждой клетки.
sum1 = ord(column1) + row1
sum2 = ord(column2) + row2

if sum1 % 2 == sum2 % 2:
    print("YES")
else:
    print("NO")

# 2
# На вход программе поступает целое число
# Ваша задача сохранить в переменную text  строку Even, если введенное число четное, иначе сохраните строку Odd
# В качестве ответа необходимо вывести переменную text

n = int(input())
text = 'Even' if n % 2 == 0 else 'Odd'
print(text)



# 3
# На вход вашей программе поступает два неравных друг другу целых числа в отдельных строках
# Ваша задача сохранить наименьшее из этих чисел в переменную  minimum, а наибольшее - в maximum
# Использовать нужно, конечно же, тернарный оператор
# В качестве ответа выведите через пробел сперва minimum , а потом maximum

a, b = int(input()), int(input())
(minimum, maximum) = (a, b) if a < b else (b, a)
print(minimum, maximum)


# 4
# При игре в "Города" игроки по очереди называют названия городов так, чтобы первая буква каждого нового слова совпадала с последней буквой предыдущего. При этом считают, что если последняя буква предыдущего слова — мягкий знак, то с первой буквой следующего слова надо сравнивать букву, предшествующую мягкому знаку.
# Напишите программу, которая считывает подряд две строки, после чего выводит «Good», если последний символ первой строки совпадает с первым символом второй (с учётом правила про мягкий знак), и «Bad» в противном случае.

a, b = input().lower(), input().lower()

aa = a[-1]
bb = b[0]
if aa == bb:
    print('Good')
elif a[-1] == 'ь':
    if a[-2] == bb:
        print('Good')
    else:
        print('Bad')
else:
        print('Bad')




# 5
# Напишите программу, которая имитирует проверку пароля, придуманного пользователем. Пользователь сперва вводит пароль, потом вводит подтверждение пароля. Вам нужно обработать следующие ситуации:
#     если пароль, который ввёл пользователь (в первый раз) короче 7 символов, программа выводит Short
#     если пароль достаточно длинный, но введённый во второй раз пароль не совпадает с первым, программа выводит Difference
#     если же и эта проверка пройдена успешно, программа выводит латинскими буквами OK


p_1, p_2=input(), input()

if len(p_1)>=7 and p_1==p_2:
    print('OK')
elif len(p_1)<7:
    print('Short')
elif p_1!=p_2:
    print('Difference')



# 6
# 