--1
#При регистрации на сайтах требуется вводить пароль дважды. 
#Это сделано для безопасности, поскольку такой подход уменьшает возможность неверного ввода пароля.
#Напишите программу, которая сравнивает пароль и его подтверждение. 
#Если они совпадают, то программа выводит: «Пароль принят», иначе: «Пароль не принят».

pass1, pass2 = input(), input()
if pass1==pass2:
    print('Пароль принят')
else:
    print ('Пароль не принят')


#--2
#Напишите программу, которая определяет, является число четным или нечетным.

num = int(input())
if num%2:
    print('Нечетное')
else:
    print('Четное')


#--3
#Напишите программу, которая проверяет, что для заданного четырехзначного числа выполняется следующее соотношение:
#сумма первой и последней цифр равна разности второй и третьей цифр.

num = int(input())
a=num//1000
b=(num//100)%10
c=(num//10)%10
d=num%10
if (a+d)==(b-c):
    print('ДА')
else:
    print('НЕТ')


#--4
#Напишите программу, которая определяет, разрешен пользователю доступ к интернет-ресурсу или нет.

#Формат входных данных
#На вход программе подаётся целое число — возраст пользователя.
#Формат выходных данных
#Программа должна вывести текст «Доступ разрешен» если возраст не менее 18, и «Доступ запрещен» в противном случае.

age = int(input())
if age>=18:
    print('Доступ разрешен')
else:
    print('Доступ запрещен')


#--5
#Напишите программу, которая определяет, являются ли три заданных числа (в указанном порядке) последовательными членами арифметической прогрессии.

#Формат входных данных
#На вход программе подаются три числа, каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести «YES» или «NO» (без кавычек) в соответствии с условием задачи. 

a,b,c = int(input()), int(input()), int(input())
if a-b==b-c:
    print('YES')
else:
    print('NO')


#--6
#Напишите программу, которая определяет наименьшее из двух чисел.

#Формат входных данных
#На вход программе подаётся два различных целых числа.
#Формат выходных данных
#Программа должна вывести наименьшее из двух чисел.

a,b = int(input()), int(input())
if a<b:
    print(a)
else:
    print(b)


#--7
#Напишите программу, которая определяет наименьшее из четырёх чисел.

#Формат входных данных
#На вход программе подаётся четыре целых числа.
#Формат выходных данных
#Программа должна вывести наименьшее из четырёх чисел.

a, b, c, d = int(input()), int(input()), int(input()), int(input())
if a<b:
    min1=a
else:
    min1=b
if c<d:
    min2=c
else:
    min2=d
if min1<min2:
    min_=min1
else:
    min_=min2
print(min_)


#--8
#Возрастная группа
#Напишите программу, которая по введённому возрасту пользователя сообщает, к какой возрастной группе он относится:
#до 13 включительно – детство;
#от 14 до 24 – молодость;
#от 25 до 59 – зрелость;
#от 60 – старость.

#Формат входных данных
#На вход программе подаётся одно целое число – возраст пользователя.
#Формат выходных данных
#Программа должна вывести название возрастной группы.

age = int(input())
if age<=13:
    print('детство')
if 14<=age<=24:
    print('молодость')
if 25<=age<=59:
    print('зрелость')
if 60<=age:
    print('старость')


#--9
#Напишите программу, которая считывает три числа и подсчитывает сумму только положительных чисел.

#Формат входных данных
#На вход программе подаются три целых числа.

#Формат выходных данных
#Программа должна вывести одно число – сумму положительных чисел.

#Примечание. Если положительных чисел нет, то следует вывести 00.

a, b, c = int(input()), int(input()), int(input())
sum=0
if a>0:
    sum=sum+a
if b>0:
    sum=sum+b
if c>0:
    sum=sum+c
print(sum)


#--10
#Напишите программу, которая принимает целое число xx и определяет, принадлежит ли данное число указанным промежуткам.

#Формат входных данных
#На вход программе подаётся целое число xx.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

x = int(input())
if -3>=x or x>=7:
    print('Принадлежит')
else:
    print('Не принадлежит')


#--11
#Назовем число красивым, если оно является четырехзначным и делится нацело на 77 или на 1717. Напишите программу, определяющую, является ли введённое число красивым. Программа должна вывести «YES», если число является красивым, или «NO» в противном случае.

#Формат входных данных
#На вход программе подаётся натуральное число.

#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

x = int(input())
if x%7==0 or x%17==0:
    print('YES')
else:
    print('NO')


#--12
#Назовем число красивым, если оно является четырехзначным и делится нацело на 77 или на 1717. Напишите программу, определяющую, является ли введённое число красивым. Программа должна вывести «YES», если число является красивым, или «NO» в противном случае.

#Формат входных данных
#На вход программе подаётся натуральное число.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

x = int(input())
if 1000<=x<=9999 and (x%7==0 or x%17==0):
    print('YES')
else:
    print('NO')


#--13
#Неравенство треугольника
#Напишите программу, которая принимает три положительных числа и определяет, существует ли невырожденный треугольник с такими сторонами.

#Формат входных данных
#На вход программе подаётся три положительных целых числа.
#Формат выходных данных
#Программа должна вывести «YES» или «NO» в соответствии с условием задачи.

a, b, c = int(input()), int(input()), int(input())
if a<b+c and (b<a+c and c<a+b):
    print('YES')
else:
    print('NO')


#--14
#Високосный год
#Напишите программу, которая определяет, является ли год с данным номером високосным. Если год является високосным, то выведите «YES», иначе выведите «NO».
#Год является високосным, если его номер кратен 4, но не кратен 100, или если он кратен 400.

#Формат входных данных
#На вход программе подаётся натуральное число.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

year = int(input())
if (year%400==0 or year%100!=0) and (year%4==0):
    print('YES')


#--15
#Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли ладья попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую, или «NO» в противном случае.

#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

#Примечание. Шахматная ладья ходит по горизонтали или вертикали.

x1,y1,x2,y2 = int(input()), int(input()), int(input()), int(input())
if (x1==x2 and y1!=y2) or (y1==y2 and x1!=x2):
    print('YES')
else:
    print('NO')


#--16
#Даны две различные клетки шахматной доски. Напишите программу,  которая определяет,
#может ли король попасть с первой клетки на вторую одним ходом.
#Программа получает на вход четыре числа от 1 до 8 каждое,
#задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
#Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую, или «NO» в противном случае.
#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8.

#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

#Примечание. Шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку.

x1,y1,x2,y2 = int(input()), int(input()), int(input()), int(input())
if (-1<=x2-x1<=1) and (-1<=y2-y1<=1):
    print('YES')
else:
    print('NO')


#--17
#Зум бросил вызов Флэшу и предложил ему честный поединок в виде гонки вокруг магнетара. В случае проигрыша эта нейтронная звезда зарядится и уничтожит мир, поэтому Флэш решил не рисковать без причины, и узнать у своего друга Циско Рамона есть ли смысл принимать вызов. Циско получил данные, что скорость Зума равна nn, а скорость Флэша равна kk.

#Напишите программу, которая должна вывести ответ Циско на вопрос Флэша.

#Формат входных данных
#На вход программе подаётся два целых числа nn и kk, скорость Зума и Флэша.
#Формат выходных данных
#Если Зум быстрее Флэша нужно вывести «NO», если Флэш быстрее Зума нужно вывести «YES»,
#если их скорости равны нужно вывести "Don't know".

z_speed, f_speed = int(input()), int(input())
if z_speed > f_speed:
    print('NO')
elif z_speed < f_speed:
    print('YES')
else:
    print("Don't know")

#--18
#Напишите программу, которая принимает три положительных числа и определяет вид треугольника, длины сторон которого равны введенным числам.

#Формат входных данных
#На вход программе подаются три числа – длины сторон существующего треугольника.
#Формат выходных данных
#Программа должна вывести на экран текст – вид треугольника («Равносторонний», «Равнобедренный» или «Разносторонний»).

a, b, c = int(input()), int(input()), int(input())
if a==b==c:
    print('Равносторонний')
elif a==b or a==c or c==b:
    print('Равнобедренный')
else:
    print('Разносторонний')


#--19
#Среднее число
#Даны три различных целых числа. Напишите программу, которая находит среднее по величине число.

#Формат входных данных
#На вход программе подаётся три различных целых числа, каждое на отдельной строке.

#Формат выходных данных
#Программа должна вывести среднее число.

#Примечание. Средним называется число, которое будет вторым, если три числа отсортировать в порядке возрастания.

a, b, c = int(input()), int(input()), int(input())
if a<b<c or c<b<a:
    print(b)
elif b<c<a or a<c<b:
    print(c)
elif c<a<b or b<a<c:
    print(a)


#--20
#Количество дней
#Дан порядковый номер месяца (1,2,…, 12). Напишите программу, которая выводит на экран количество дней в этом месяце. Принять, что год является невисокосным.

#Примечание. Постарайтесь написать программу, так чтобы в ней было не более трех условий.

#Формат входных данных
#На вход программе подаётся одно целое число – порядковый номер месяца.
#Формат выходных данных
#Программа должна вывести количество дней в этом месяце.

month = int(input())
if month==2:
    print(28)
elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
    print(31)
else:
    print(30)



#--21
#Церемония взвешивания
#Известен вес боксера-любителя (целое число). Известно, что вес таков, что боксер может быть отнесён к одной из трех весовых категорий:

#Легкий вес – до 60 кг;
#Первый полусредний вес – до 64 кг;
#Полусредний вес – до 69 кг.
#Напишите программу, определяющую, в какой категории будет выступать данный боксер.

#Формат входных данных
#На вход программе подаётся одно целое число.
#Формат выходных данных
#Программа должна вывести текст – название весовой категории.

weight = int(input())
if weight<60:
    print('Легкий вес')
elif weight<64:
    print('Первый полусредний вес')
elif weight<69:
    print('Полусредний вес')


#--22
#Самописный калькулятор 🌶️
#Напишите программу, которая считывает с клавиатуры два целых числа и строку. Если эта строка является обозначением одной из четырёх математических операций (+, -, *, /), то выведите результат применения этой операции к введённым ранее числам, в противном случае выведите «Неверная операция». Если пользователь захочет поделить на ноль, выведите текст «На ноль делить нельзя!».

#Формат входных данных
#На вход программе подаются два целых числа, каждое на отдельной строке, и строка.
#Формат выходных данных
#Программа должна вывести результат применения операции к введенным числам или соответствующий текст, если операция неверная либо если происходит деление на ноль.

a, b = int(input()), int(input())
s = input()
if b==0 and s=='/':
    print('На ноль делить нельзя!')
else:
    if s=='+':
        print(a+b)
    elif s=='-':
        print(a-b)
    elif s=='*':
        print(a*b)
    elif s=='/':
        print(a/b)
    else:
        print('Неверная операция')


#--23
#Цветовой микшер 🌶️
#Красный, синий и желтый называются основными цветами, потому что их нельзя получить путем смешения других цветов. При смешивании двух основных цветов получается вторичный цвет:
#
#если смешать красный и синий, то получится фиолетовый;
#если смешать красный и желтый, то получится оранжевый;
#если смешать синий и желтый, то получится зеленый.
#Напишите программу, которая считывает названия двух основных цветов для смешивания. Если пользователь вводит что-нибудь помимо названий «красный», «синий» или «желтый», то программа должна вывести сообщение об ошибке. В противном случае программа должна вывести название вторичного цвета, который получится в результате.

col1, col2 = input(), input()
if (col1 == 'синий' or col1 == 'красный' or col1 == 'желтый') and (col2 == 'синий' or col2 =='красный' or col2 =='желтый'):
    if col1 == 'красный':
        if col2 == 'красный':
            print('красный')
        elif col2 == 'желтый':
            print('оранжевый')
        elif col2 == 'синий':
            print('фиолетовый')
    elif col1 == 'синий':
        if col2 == 'красный':
            print('фиолетовый')
        elif col2 == 'желтый':
            print('зеленый')
        elif col2 == 'синий':
            print('синий')
    elif col1 == 'желтый':
        if col2 == 'красный':
            print('оранжевый')
        elif col2 == 'желтый':
            print('желтый')
        elif col2 == 'синий':
            print('зеленый')
else:
    print('ошибка цвета')


#--24
#Цвета колеса рулетки 🌶️
#На колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов: 
#
#карман 0 зеленый;
#для карманов с 1 по 10 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
#для карманов с 11 по 18 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный;
#для карманов с 19 по 28 карманы с нечетным номером имеют красный цвет, карманы с четным номером – черный;
#для карманов с 29 по 36 карманы с нечетным номером имеют черный цвет, карманы с четным номером – красный.
#Напишите программу, которая считывает номер кармана и показывает, является ли этот карман зеленым, красным или черным. Программа должна вывести сообщение об ошибке, если пользователь вводит число, которое лежит вне диапазона от 0 до 36.
#
#Формат входных данных
#На вход программе подаётся одно целое число.
#
#Формат выходных данных
#Программа должна вывести цвет кармана либо сообщение «ошибка ввода», если введённое число лежит вне диапазона от 0 до 36.

k = int(input())
if k == 0:
    print('зеленый')
elif (1<=k<=10 or 19<=k<=28):
    if k%2==0:
        print('черный')
    else:
        print('красный')
elif (11<=k<=18 or 29<=k<=36):
    if k%2==0:
        print('красный')
    else:
        print('черный')
else:
    print('ошибка ввода')


#--25
#Пересечение отрезков 🌶️🌶️
#На числовой прямой даны два отрезка: [a_1;  b_1] и [a_2; b_2]. Напишите программу, которая находит их пересечение.
#
#Пересечением двух отрезков может быть:
#отрезок;
#точка;
#пустое множество.
#
#Формат входных данных
#На вход программе подаются 4 целых числа a_1,  b_1, a_2,  b_2a,
# каждое на отдельной строке. Гарантируется, что a_1 < b_1a 
#​ и a_2 < b_2a 
#
#Формат выходных данных
#Программа должна вывести на экран границы отрезка, являющегося пересечением, либо общую точку, либо текст «пустое множество».

a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())
if a1<a2:
    if b1<a2:
        print('пустое множество')
    elif b1==a2:
        print(a2)
    elif a2<b1<=b2:
        print(a2, b1)
    else:
        print(a2,b2)
elif a2<=a1<b2:
    if b1<=b2:
        print(a1, b1)
    else:
        print(a1, b2)
elif a1==b2:
    print(a1)
else:
    print('пустое множество')


#--26
#Начало столетия
#
#Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля. Если год оканчивается, то выведите «YES», иначе выведите «NO».
#
#Формат входных данных
#На вход программе подаётся натуральное число.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

year = int(input())
if year%100 == 0:
    print('YES')
else:
    print('NO')


#--27

#Шахматная доска
#
#Заданы две клетки шахматной доски. Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
#
#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 + y1 + x2 + y2) % 2 == 0:
    print('YES')
else:
    print('NO')



#--28
#Girls only
#
#Футбольная команда набирает девочек от 10 до 15 лет включительно. Напишите программу, которая запрашивает возраст и пол претендента, используя обозначение пола буквы m (от male – мужчина) и f (от female – женщина) и определяет подходит ли претендент для вступления в команду или нет. Если претендент подходит, то выведите «YES», иначе выведите «NO».
#
#Формат входных данных
#На вход программе подаётся натуральное число – возраст претендента и буква обозначающая пол m (мужчина) или f (женщина).
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

a = int(input())
b = input()
if a >= 10 and a <= 15 and b == 'f':
    print("YES")
else:
    print("NO")


#--29
#YES or NO вот в чем вопрос
#
#Напишите программу, которая принимает на вход число и в зависимости от условий выводит текст «YES», либо «NO».
#
#Условия:
#
#если число нечётное, то вывести «YES»;
#если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
#если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
#если число чётное и больше 20, то вывести «NO».
#
#Формат входных данных
#На вход программе подаётся натуральное число.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

a = int(input())
if a % 2 != 0:
    print("YES")
if a % 2 == 0 and a >= 2 and a <= 5:
    print("NO")
if a % 2 == 0 and a >= 6 and a <= 20:
    print("YES")
if a % 2 == 0 and a > 20:
    print("NO")

#--30
#
#Ход слона ?️
#
#Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом слона можно попасть во вторую или «NO» в противном случае.
#
#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.
#
#Примечание. Шахматный слон ходит по диагоналям.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())

if (x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2):
    print('YES')
else:
    print('NO')


#--31

#Ход коня
#
#Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую или «NO» в противном случае.
#
#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.
#
#Примечание. Шахматный конь ходит буквой «Г».


x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 - x2) ** 2 + (y1 - y2) ** 2 == 5:
    print("YES")
else:
    print("NO")


#--32
#Ход ферзя
#
#Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли ферзь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом ферзя можно попасть во вторую или «NO» в противном случае.
#
#Формат входных данных
#На вход программе подаётся четыре числа от 1 до 8.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

#Примечание. Шахматный ферзь ходит по диагонали, горизонтали или вертикали.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if abs(x1 - x2) == abs(y1 - y2) or x1 == x2 or y1 == y2:
    print('YES')
else:
    print('NO')


#--33 
#Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь.
#
#Формат входных данных
#На вход программе подаётся два числа с плавающей точкой – длины катетов, каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести одно число – площадь треугольника.

a, b = float(input()), float(input())
s = 0.5 * a * b
print(s)


#--34
#Две старушки
#Две старушки идут навстречу друг другу с постоянными скоростями V_1 и V_2 км/ч. 
#Определите, через какое время старушки встретятся, если расстояние между ними равно SS км.

s, v1, v2 = float(input()), float(input()), float(input())
t=s/(v1+v2)
print(t)


#--35
#Напишите программу, которая считывает с клавиатуры одно число и выводит обратное ему. Если при этом введённое с клавиатуры число – ноль, то вывести «Обратного числа не существует» (без кавычек).
#
#Формат входных данных 
#На вход программе подается одно действительное число.
#Формат выходных данных
#Программа должна вывести действительное число обратное данному, либо текст в соответствии с условием задачи.

n = float(input())
if n!=0:
    print(1/n)
else:
    print('Обратного числа не существует')


#--36
#451 градус по Фаренгейту 
#У известного американского писателя Рэя Бредбери есть роман «451 градус по Фаренгейту». Напишите программу, которая определяет, какой температуре по шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
#
#Формат входных данных
#На вход программе подаётся вещественное число градусов по шкале Фаренгейта.
#Формат выходных данных
#Программа должна вывести число градусов по шкале Цельсия.

f = float(input())
c = (f-32)*5/9
print(c)


#--37
#Dog age
#На вход программе подается число nn – количество собачьих лет. Напишите программу, которая вычисляет возраст собаки в человеческих годах.
#
#Формат входных данных
#На вход программе подаётся натуральное число – количество собачьих лет.
#Формат выходных данных
#Программа должна вывести возраст собаки в человеческих годах.
#
#Примечание. В течение первых двух лет собачий год равен 10.510.5 человеческим годам. После этого каждый год собаки равен 4 человеческим годам.

age = float(input())
if 0 < age <= 2:
    print(age * 10.5)
else:
    print(2 * 10.5 + (age - 2) * 4)


#--38
#Первая цифра после точки
#Дано положительное действительное число. Выведите его первую цифру после десятичной точки.
#
#Формат входных данных
#На вход программе подается положительное действительное число.
#Формат выходных данных
#Программа должна вывести цифру в соответствии с условием задачи.

x = float(input())
print(int(x*10)%10)


#--39
#Дробная часть
#Дано положительное действительное число. Выведите его дробную часть.
#
#Формат входных данных
#На вход программе подается положительное действительное число.
#
#Формат выходных данных
#Программа должна вывести дробную часть числа в соответствии с условием задачи.

a = float(input())
print(a - int(a))


#--40
#Наибольшее и наименьшее
#Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.
#
#Формат входных данных
#На вход программе подается пять целых чисел, каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести наименьшее и наибольшее число с поясняющей надписью.

a, b, c, d, e = int(input()), int(input()), int(input()), int(input()), int(input())
print('Наименьшее число =', min(a, b, c, d, e))
print('Наибольшее число =', max(a, b, c, d, e))


#--41
#Сортировка трёх 🌶️
#Напишите программу, которая упорядочивает три числа от большего к меньшему.
#
#Формат входных данных
#На вход программе подается три целых числа, каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести три числа, каждое на отдельной строке, упорядоченных от большего к меньшему.

a, b, c = int(input()), int(input()), int(input())
print(max(a, b, c))
print(a + b + c - min(a, b, c) - max(a, b, c))
print(min(a, b, c))


#--42
#Интересное число
#Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре. Напишите программу, которая определяет интересное число или нет. Если число интересное, следует вывести – «Число интересное» иначе «Число неинтересное».
#
#Формат входных данных
#На вход программе подается целое трехзначное число.
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

x = int(input())
a = x % 10
b = x // 10 % 10
c = x // 100
if a + b + c == 2 * max(a, b, c):
    print("Число интересное")
else:
    print("Число неинтересное")


#--44
#Абсолютная сумма
#Даны пять чисел ​
#Напишите программу, которая вычисляет сумму их модулей 
#
#Формат входных данных
#На вход программе подается пять действительных чисел , каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести одно число – сумму модулей введённых чисел.

a = abs(float(input()))
b = abs(float(input()))
c = abs(float(input()))
d = abs(float(input()))
e = abs(float(input()))

print(a + b + c + d + e)


#--45
#Манхэттенское расстояние
#Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути. Если только вы не умеете проходить сквозь стены, вам обязательно придется идти вдоль его параллельно-перпендикулярных улиц.
#На плоскости манхэттенское расстояние между двумя точками  
#Напишите программу определяющую манхэттенское расстояние между двумя точками, координаты которых заданы.
#
#Формат входных данных
#На вход программе подается четыре целых числа, каждое на отдельной строке 
#Формат выходных данных
#Программа должна вывести одно число – манхэттенское расстояние.

p1 = int(input())
p2 = int(input())
q1 = int(input())
q2 = int(input())

print(abs(p1 - q1) + abs(p2 - q2))


#--46
#Напишите программу, которая выводит текст:
#
#"Python is a great language!", said Fred. "I don't ever remember having this much fun before."
#Примечание. Используйте конкатенацию строк.

a='"Python is a great language!",'
b=" said Fred. "
c='"I'
d=" don't "
e= 'ever remember having this much fun before."'
print (a+b+c+d+e)



#--47
#What's Your Name?
#Напишите программу, которая считывает с клавиатуры две строки – имя и фамилию пользователя и выводит фразу:
#
#«Hello [введенное имя] [введенная фамилия]! You just delved into Python».
#
#Формат входных данных
#На вход программе подаётся две строки (имя и фамилия), каждая на отдельной строке.

name, surname = input(), input()
print('Hello '+ name+' '+surname+'! You just delved into Python')


#--48
#Футбольная команда
#Напишите программу, которая считывает с клавиатуры название футбольной команды и выводит фразу:
#
#«Футбольная команда [введённая строка] имеет длину [длина введённой строки] символов».
#
#Формат входных данных
#На вход программе подаётся строка – название футбольной команды.

team = input()
print('Футбольная команда', team, 'имеет длину', len(team), 'символов')


#--49
#Три города
#Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
#
#Формат входных данных
#На вход программе подаётся названия трех городов, каждое на отдельной строке.

#Формат выходных данных
#Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.
#
#Примечание. Гарантируется, что длины названий всех трех городов различны.

s1, s2, s3 = input(), input(), input()
l1=len(s1)
l2=len(s2)
l3=len(s3)
if min(l1, l2, l3) == l1:
    print(s1)
elif min(l1, l2, l3) == l2:
    print(s2)
else:
    print(s3)
if max(l1, l2, l3) == l1:
    print(s1)
elif max(l1, l2, l3) == l2:
    print(s2)
else:
    print(s3)


#--50
#Арифметические строки
#Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет можно ли из длин этих строк построить возрастающую арифметическую прогрессию.
#
#Формат входных данных
#На вход программе подаются три строки, каждая на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую прогрессию, «NO» в ином случае.

a, b, c = input(), input(), input()
al=len(a)
bl=len(b)
cl=len(c)
maxl=max(al,bl,cl)
minl = min(al, bl, cl)
if (maxl+minl)/2==al or (maxl+minl)/2==bl or (maxl+minl)/2==cl:
    print('YES')
else:
    print('NO')


#--51
#Цвет настроения синий
#Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введенной строке есть подстрока «синий» и «NO» в противном случае.
#
#Формат входных данных
#На вход программе подается одна строка.

st = input()
if 'синий' in st:
    print('YES')
else:
    print('NO')


#--52
#Отдыхаем ли?
#Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введённой строке есть подстрока «суббота» или «воскресенье», и «NO» в противном случае.
#
#Формат входных данных
#На вход программе подается одна строка.

st = input()
if ('суббота' in st) or ('воскресенье' in st):
    print('YES')
else:
    print('NO')


#--53
#Корректный email
#Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки. Напишите программу проверяющую корректность email адреса.
#
#Формат входных данных
#На вход программе подаётся одна строка – email адрес.
#
#Формат выходных данных
#Программа должна вывести строку «YES», если email адрес является корректным и «NO» в ином случае.

st = input()
if ('@' in st) and ('.' in st):
    print('YES')
else:
    print('NO')


#--54
#На плоскости евклидово расстояние между двумя точками (x1​;y1​) и (x2​;y2​) определяется 
#Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.
#
#Формат входных данных
#На вход программе подается четыре вещественных числа, каждое на отдельной строке x1​,y1​,x2​,y2​​.
#
#Формат выходных данных
#Программа должна вывести одно число – евклидово расстояние.

from math import sqrt
x1, y1, x2,y2 = float(input()), float(input()), float(input()), float(input())
s = sqrt((abs(x1-x2))**2+(abs(y1-y2))**2)
print(s)

#--55
#Площадь и длина
#Напишите программу определяющую площадь круга и длину окружности по заданному радиусу RR.
#
#Формат входных данных
#На вход программе подается одно вещественное число RR​.
#Формат выходных данных
#Программа должна вывести два числа – площадь круга и длину окружности радиуса RR.

import math
r = float(input())
s = math.pi * r**2
l = 2 * math.pi * r
print(s,l, sep = '\n')


#--56
#Формат входных данных
#На вход программе подается два вещественных числа aa и bb​, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.

from math import *
a, b = float(input()), float(input())
ar = (a + b) / 2
geom = sqrt(a * b)
garm = 2 * a * b/(a + b)
kw = sqrt((a**2 + b**2) / 2)
print(ar, geom, garm, kw, sep = '\n')


#--57
#Напишите программу, вычисляющую значение тригонометрического выражения
#sin x + cos x + tan^2 x
#по заданному числу градусов x.
#Формат входных данных
#На вход программе подается одно вещественное число xx измеряемое в градусах​. 
#
#Формат выходных данных
#Программа должна вывести одно число – значение тригонометрического выражения.

#Примечание 1. Тригонометрические функции принимают аргумент в радианах. Чтобы перевести градусы в радианы, воспользуйтесь формулой 
# r=180 x⋅π
​#
#Примечание 2. Модуль math содержит встроенную функцию radians(), которая переводит угол из градусов в угол в радианах.

from math import *
x = radians(float(input()))
a = (sin(x) + cos(x) + tan(x)**2)
print(a)


#--58
#Напишите программу, вычисляющую значение ceil x\rceil + \lfloor x\rfloor⌈x⌉ +⌊x⌋ по заданному вещественному числу xx.
#
#Формат входных данных
#На вход программе подается одно вещественное число xx.
#
#Формат выходных данных
#Программа должна вывести одно число – значение указанного выражения.
#
#Примечание. ceil⌈x⌉ – потолок числа, floor⌊x⌋ – пол числа.

import math
a = float(input())
b = (math.ceil(a) + math.floor(a))
print(b)


#--59
#Даны три вещественных числа aa, bb, cc. Напишите программу, которая находит вещественные корни квадратного уравнения 
#ax^2 + bx + c = 0.
#Формат входных данных
#На вход программе подается три вещественных числа a , b, c
#каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.
#
#Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.

from math import *
a, b, c = float(input()), float(input()), float(input()) 
discr = b**2-4*a*c 
if discr < 0:
    print('Нет корней')
elif discr == 0: 
    x = -b / (2*a)
    print(x)
elif discr > 0:          
    x1 = (-b - discr ** 0.5) / (2*a)
    x2 = (-b + discr ** 0.5) / (2*a)
    print(min(x1, x2))
    print(max(x1, x2))


#--60
#Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между
#смежными сторонами. 
# 
#Даны два числа: натуральное число nn и вещественное число aa. 
#Напишите программу, которая находит площадь указанного правильного многоугольника.
#
#Формат входных данных
#На вход программе подается два числа nn и aa, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести вещественное число – площадь многоугольника

from math import *
n, a = float(input()), float(input())
S = (n * a**2) / (4 * tan(pi / n))
print(S)


#--61
#Напишите программу, которая выводит слова «Python is awesome!» (без кавычек) 10 раз.
#
#Формат входных данных
#
#Формат выходных данных
#Программа должна вывести 10 раз текст «Python is awesome!», каждый на отдельной строке.

for i  in range(10):
    print ('Python is awesome!')


#--62
#Дано предложение и количество раз которое его надо повторить. Напишите программу, которая повторяет данное предложение нужное количество раз.
#Формат входных данных
#В первой строке записано текстовое предложение, во второй — количество повторений.
#Формат выходных данных
#Программа должна вывести указанное текстовое предложение нужное количество раз. Каждое повторение должно начинаться с новой строки.

fr, n = input(), int(input())
for i in range(n):
    print(fr)



#--63
#На вход программе подается натуральное число nn.
#
#Напишите программу, которая печатает звездный прямоугольник размерами n \times 19n×19.
#
#Формат входных данных
#На вход программе подаётся натуральное число n \in [1; \, 20]n∈[1;20] — высота звездного прямоугольника.
#
#Формат выходных данных
#Программа должна вывести звездный прямоугольник размерами n \times 19n×19.
#
#Подсказка. Для печати звездной линии используйте умножение строки на число.

n = int(input())
for i in range(n):
    print('*'*19)


#--64
#Напишите программу, которая считывает одну строку текста и выводит 10 строк, пронумерованных от 0 до 9, каждая с указанной строкой текста.
#
#Формат входных данных
#На вход программе подается одна строка текста.
#Формат выходных данных
#Программа должна вывести десять строк в соответствии с условием задачи.

st = input()
for i in range(10):
    print(i, st)


#--65
#На вход программе подается натуральное число nn. Напишите программу, которая для каждого из чисел от 00 до nn (включительно) выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).
#
#Формат входных данных
#На вход программе подается натуральное число nn.
#
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

n = int(input())
for i in range(n+1):
    print('Квадрат числа', i, 'равен', i*i)


#--66
#На вход программе подается натуральное число n \, (n \ge 2)n(n≥2) – катет прямоугольного равнобедренного треугольника.
#
#Напишите программу, которая выводит звездный треугольник в соответствии с примером.
#
#Формат входных данных
#На вход программе подается одно натуральное число n \, (n \ge 2)n(n≥2).
#
#Формат выходных данных
#Программа должна вывести треугольник в соответствии с условием задачи.

n = int(input())
for i in range(n):
    print('*'*(n-i))



#--67
#На вход программе подается три натуральных числа m, p,m:
#
#m: стартовое количество организмов;
#p: среднесуточное увеличение в %;
#n: количество дней для размножения.
#Напишите программу, которая предсказывает размер популяции организмов. Программа должна выводить размер популяции в каждый день, начиная с 11 и заканчивая nn-м днем.
#
#Формат входных данных
#На вход программе подается три натуральных числа.
#
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

m, p, n = int(input()), int(input()), int(input())
for i in range(n):
    print(i+1, m)
    m=m+m*p/100


#--68
#Даны два целых числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn включительно.
#
#Формат входных данных
#На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести числа в соответствии с условием задачи.

m, n = int(input()), int(input())
for i in range(m,(n+1)):
    print(i)


#--69
#Даны два целых числа mm и nn. Напишите программу, которая выводит все числа от mm до nn включительно в порядке возрастания, если m < nm<n, или в порядке убывания в противном случае.
#
#Формат входных данных
#На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести числа в соответствии с условием задачи.

m, n = int(input()), int(input())
if m < n :
    for i in range(m, n+1):
        print(i)
else:
    for i in range(m, n-1, -1):
        print(i)


#--70
#Даны два целых числа mm и nn (m > nm>n). Напишите программу, которая выводит все нечетные числа от mm до nn включительно в порядке убывания.
#
#Формат входных данных
#На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести числа в соответствии с условием задачи.

m, n - int(input()), int(input())
b = ((m - 1) // 2) * 2 + 1
for i in range(b, n - 1, -2):
    print(i)


#--71
#Даны два целых числа mm и nn (m > nm>n). Напишите программу, которая выводит все нечетные числа от mm до nn включительно в порядке убывания.
#
#Формат входных данных
#На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
#Формат выходных данных
#Программа должна вывести числа в соответствии с условием задачи.

m, n = int(input()), int(input())
b = ((m - 1) // 2) * 2 + 1
for i in range(b, n - 1, -2):
    print(i)


#--72
#Даны два натуральных числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn включительно удовлетворяющие хотя бы одному из условий:
#
#число кратно 17;
#число оканчивается на 9;
#число кратно 3 и 5 одновременно.
#Формат входных данных
#На вход программе подаются два натуральных числа mm и nn (m \le nm≤n), каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести числа в соответствии с условием задачи.
#
#Примечание. Если чисел удовлетворяющих условию нет, выводить ничего не надо.

m, n = int(input()), int(input())
for i in range(m, n + 1):
    if i % 17 == 0 or i % 10 == 9 or i % 15 == 0:
        print(i)


#--73
#Дано натуральное число nn. Напишите программу, которая выводит таблицу умножения на nn.
#
#Формат входных данных
#На вход программе подается натуральное число.
#
#Формат выходных данных
#Программа должна вывести таблицу умножения на введенное число.
#
#Примечание. В качестве знака умножения используйте английскую букву x.

n = int(input())

for i in range(1, 11):
    print(n, 'x', i, '=', n * i)


#--74
#Написать программу, которая считывает 10 чисел и определяет сколько из них больше 10.

counter = 0
for i in range(10):
    num = int(input())
    if num > 10:
        counter = counter + 1
print('Было введено', counter, 'чисел, больших 10.')


#--75
#Подсчитать количество чисел из диапазона [1; \, 100][1;100], квадрат которых оканчивается на 4.

counter = 0
for i in range(1, 101):
    if i**2 % 10 == 4:
        counter = counter + 1
print(counter)


#--76
#Написать программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.

total = 0
for i in range(10):
    num = int(input())
    if num > 10:
        total = total + num
print('Сумма чисел больших 10 равна',  total)


#--77
#Напиать программу, которая запрашивает 10 целых чисел и находит их среднее значение:

total = 0
for i in range(10):
    num = int(input())
    total = total + num
average = total / 10
print('Среднее значение равно', average)


#--78
#Напишем программу, определяющую, что натуральное число является простым:

num = int(input())
flag = True

for i in range(2, num):
    if num % i == 0:        #  если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False
if num == 1:
    print('Это единица, она не простая и не составная') 
elif flag == True:
    print('Число простое')
else:
    print('Число составное')


#--79

#Написать программу, которая считывает 10 положительных чисел и находит среди них наибольшее число.

largest = -1
for i in range(10):
    num = int(input())    
    if num > largest:
        largest = num
print('Наибольшее число равно', largest) 


#--80
#На вход программе подаются два целых числа aa и bb (a \le b)(a≤b). Напишите программу, которая подсчитывает количество чисел в диапазоне от aa до bb включительно, куб которых оканчивается на 44 или 99.
#
#Формат входных данных
#На вход программе подаются два целых числа aa и bb (a \le b)(a≤b).
#
#Формат выходных данных
#Программа должна вывести одно целое число в соответствии с условием программы.

a, b = int(input()), int(input())
count = 0
for i in range (a,b+1):
    if i*i*i % 10 == 4 or  i*i*i % 10 == 9:
        count = count +1
print(count)


#--81
#На вход программе подается натуральное число nn, а затем nn целых чисел, каждое на отдельной строке. Напишите программу, которая подсчитывает сумму введенных чисел. 
#
#Формат входных данных
#На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести сумму данных чисел.

n = int(input())
sum = 0
for i in range(1, n+1):
    sum = sum + int(input())
print (sum)


#--82
#Асимптотическое приближение
#На вход программе подается натуральное число nn.
# Напишите программу, которая вычисляет значение выражения

from math import log
n = int(input())
assim = 0
for i in range(1, n+1):
    assim += (1/i)
print(assim - log(n))


#--83
#На вход программе подается натуральное число nn. Напишите программу, которая подсчитывает сумму тех чисел от 11 до nn (включительно) квадрат которых оканчивается на 2, \, 52,5 или 88.
#
#Формат входных данных
#На вход программе подается натуральное число nn.
#
#Формат выходных данных
#Программа должна вывести единственное число в соответствии с условием задачи.
#
#Примечание. Если таких чисел нет в указанном диапазоне, то следует вывести 00.

n = int(input())
summa = 0
for i in range(1, n+1):
    if i**2%10 == 2 or i**2%10 == 5 or i**2%10 == 8:
        summa += i
print(summa)


#--84
#Факториал
#На вход программе подается натуральное число nn. Напишите программу, которая вычисляет n!n!.
#
#Входные данные
#На вход программе подается натуральное число n, \, (n \le 12)n,(n≤12).
#
#Выходные данные
#Программа должна вывести единственное число в соответствии с условием задачи.
#
#Примечание. Факториалом натурального числа nn, называется произведение всех натуральных чисел от 11 до nn

n = int(input())
factorial = 1
for i in range(1,n+1):
    factorial*=i
print(factorial)


#--85
#Без нулей
#Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.
#
#Формат входных данных
#На вход программе подаются 10 целых чисел, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести произведение отличных от нуля чисел.
#
#Примечание. Гарантируется, что хотя бы одно из 10 чисел является ненулевым.

proizv = 1
for i in range (0,10):
    d = int(input())
    if d != 0:
        proizv *= d
print(proizv)


#--86
#Сумма делителей
#На вход программе подается натуральное число nn. Напишите программу, которая вычисляет сумму всех его делителей.
#
#Входные данные
#На вход программе подается натуральное число nn.
#
#Выходные данные
#Программа должна вывести единственное число в соответствии с условием задачи.
#
#Примечание. Функция подсчета суммы всех делителей числа является очень важной в теории чисел.

n = int(input())
div = 0
for i in range(1,n+1):
    if n%i == 0:
        div +=i
print(div)


#--87
#На вход программе подается натуральное число nn. Напишите программу вычисления знакочередующей суммы 
#1-2+3-4+5-6 + ... + (-1)^{n+1}n.
#
#Входные данные
#На вход программе подается натуральное число nn.
#Выходные данные
#Программа должна вывести единственное число в соответствии с условием задачи.

n = int(input())
sum = 0
for i in range(1, n+1):
    sum = sum +  i* (-1)**(i+1)
print(sum)


#--88
#На вход программе подается натуральное число nn, а затем nn различных натуральных чисел, каждое на отдельной строке. Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.
#
#Формат входных данных
#На вход программе подаются натуральное число n \ge 2n≥2, а затем nn различных натуральных чисел, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести два наибольших числа, каждое на отдельной строке.

n = int(input())
max1 = max2 = 1         
for i in range(1, n+1): 
    a = int(input())    
    if a > max1:        
        max2 = max1     
        max1 = a        
    elif a > max2:      
        max2 = a  
print(max1) 
print(max2)


#--89
#Напишите программу, которая считывает последовательность из 10 целых чисел и определяет является ли каждое из них четным или нет.
#
#формат входных данных
#На вход программе подаются 10 целых чисел, каждое на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести строку «YES», если все числа четные и «NO» в ином случае.

count = 0
for i in range (0,10):
    if int(input())%2 == 0:
        count += 1
if count == 10:
    print('YES')
else:
    print('NO')


#--90
#Последовательность Фибоначчи 🌶️
#Напишите программу, которая считывает натуральное число nn и выводит первые nn чисел последовательности Фибоначчи.
#
#Формат входных данных
#На вход программе подается одно число n\,  (n \le 100)n (n≤100) – количество членов последовательности.
#
#Формат выходных данных
#Программа должна вывести члены последовательности Фибоначчи, отделенные символом пробела.
#
#Примечание. Последовательность Фибоначчи – это последовательность натуральных чисел, где каждое последующее число является суммой двух предыдущих:
#1, 1, 2, 3, 5, 8, 13,  21, 34, 55, 89,…

n = int(input())                
fib1 = 0                       
fib2 = 1                        
for i  in range(n):             
    fib2 = fib1 + fib2          
    fib1 = fib2 - fib1          
    print(fib1,end=' ')


#--91
#На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит члены данной последовательности.
#
#Формат входных данных
#На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести члены данной последовательности.

a = input()
while a!='КОНЕЦ':  
    print(a)
    a = input()


#--92
#На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является слово «КОНЕЦ» или «конец» (большими или маленькими буквами, без кавычек). Напишите программу, которая выводит члены данной последовательности.
#
#Формат входных данных
#На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести члены данной последовательности.

t = input()
while t != "КОНЕЦ"  and t != "конец" :
    print(t)
    t = input()


#--93
#На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами, без кавычек). Напишите программу, которая выводит общее количество членов данной последовательности.
#
#Формат входных данных
#На вход программе подается последовательность слов, каждое слово на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести общее количество членов данной последовательности.

t = input()
count = 0
while t != "стоп"  and t != "хватит" and t != "достаточно" :
    count += 1
    t = input()
print(count)



#--94
#На вход программе подается последовательность целых чисел делящихся на 77, каждое число на отдельной строке. Концом последовательности является любое число не делящееся на 77. Напишите программу, которая выводит члены данной последовательности.
#
#Формат входных данных
#На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести члены данной последовательности.

a = int(input())
while a % 7 == 0:
    print(a)
    a = int(input())


#--95
#На вход программе подается последовательность целых чисел, каждое число на отдельной строке. Концом последовательности является любое отрицательное число. Напишите программу, которая выводит сумму всех членов данной последовательности.
#
#Формат входных данных
#На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести сумму членов данной последовательности.

a = int(input())
s = 0 
while a >= 0:
    s += a
    a = int(input())
print(s)


#--96
#На вход программе подается последовательность целых чисел от 11 до 55, характеризующее оценку ученика, каждое число на отдельной строке. Концом последовательности является любое отрицательное число, либо число большее 55. Напишите программу, которая выводит количество пятерок.
#
#Формат входных данных
#На вход программе подается последовательность чисел, каждое число на отдельной строке.
#
#Формат выходных данных
#Программа должна вывести количество пятерок.

a = int(input())
count = 0 
while a >= 0 and a<=5:
    if a == 5:
        count += 1
    a = int(input())
print(count)



#--97
#Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами 1, \, 5, \, 10, \, 251,5,10,25.
#
#Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.
#
#Формат входных данных 
#На вход программе подается одно натуральное число, цена за услугу ведьмака.
#
#Формат выходных данных
#Программа должна вывести минимально возможное количество чеканных монет для оплаты.

price = int(input())  
count=0               
while price > 0:      
  if price >= 25:     
    price-=25         
  elif price >= 10:   
    price-=10         
  elif price >= 5:    
    price-=5          
  else:               
    price-=1          
  count+=1           
print(count) 


#--98
#Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
#
#Формат входных данных 
#На вход программе подается одно натуральное число.
#
#Формат выходных данных
#Программа должна вывести цифры введенного числа в столбик в обратном порядке.

num = int(input())

while num != 0:
    last_digit = num % 10
    print(last_digit)
    num = num // 10


#--99
#Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.
#
#Формат входных данных 
#На вход программе подается одно натуральное число.
#
#Формат выходных данных
#Программа должна вывести число, записанное в обратном порядке.

num = int(input())

while num != 0:
    last_digit = num % 10
    print(last_digit, end='')
    num = num // 10


#--100
#Дано натуральное число (n≥10). Напишите программу, которая определяет его максимальную и минимальную цифры.
#
#Формат входных данных 
#На вход программе подается одно натуральное число.
#
#Формат выходных данных
#Программа должна вывести максимальную и минимальную цифры введенного числа (с поясняющей надписью).

num = int(input())
min=9
max = 0
while num != 0:
    last_digit = num % 10
    if last_digit > max:
        max = last_digit
    if last_digit < min:
        min = last_digit
    num = num // 10
print('Максимальная цифра равна', max)
print('Минимальная цифра равна', min)


#--101
#Дано натуральное число. Напишите программу, которая вычисляет:
#
#сумму его цифр;
#количество цифр в нем;
#произведение его цифр;
#среднее арифметическое его цифр;
#его первую цифру;
#сумму его первой и последней цифры.
#Формат входных данных 
#На вход программе подается одно натуральное число.
#
#Формат выходных данных
#Программа должна вывести значения указанных величин в указанном порядке.

n = int(input())   
nn = n                        
sum = 0                        
product = 1                       
count = 0                         
 
while n != 0:                
    sum += n % 10          
    product *= n % 10        
    count += 1                    
    n //= 10                 
 
print(sum)                      
print(count)                     
print(product)                    
print(sum/count)                
print(nn//10 ** (count-1))         
print(nn//10 ** (count-1) + nn%10)


#--102
#Дано натуральное число n(n > 9). Напишите программу, которая определяет его вторую (с начала) цифру.
#
#Формат входных данных 
#На вход программе подается одно натуральное число, состоящее как минимум из двух цифр.
#
#Формат выходных данных
#Программа должна вывести его вторую (с начала) цифру.

n = int(input())
sec_dig = 0           

while n > 9:         
    sec_dig = n % 10  
    n = n // 10      
print(sec_dig) 


#--103
#Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.
#
#Формат входных данных 
#На вход программе подается одно натуральное число.
#
#Формат выходных данных
#Программа должна вывести «YES» если число состоит из одинаковых цифр и «NO» в противном случае.

num = int(input())       
flag = True              

while num > 9:           
    posledn = num % 10      
    num = num // 10         
    predposl = num % 10             
    if posledn != predposl:      
        flag = False       
if flag:                 
    print('YES')         
else:                
    print('NO')  


#--104
#Дано натуральное число. Напишите программу, которая определяет, является ли последовательность его цифр при просмотре справа налево упорядоченной по неубыванию.
#
#Формат входных данных 
#На вход программе подается одно натуральное число.
#Формат выходных данных
#Программа должна вывести «YES» если последовательность его цифр при просмотре справа налево является упорядоченной по неубыванию и «NO» в противном случае.

num = int(input())
flag = 'YES'           
a = num % 10         

while num:            
    if a > num % 10:  
        flag  = 'NO'    
    else:             
        a = num % 10  
    num //= 10        
print(flag)



#--105
#Наименьший делитель
#
#На вход программе подается число n > 1. Напишите программу, которая выводит его наименьший отличный от 1 делитель.
#
#Формат входных данных
#На вход программе подается одно натуральное число n.
#
#Формат выходных данных
#Программа должна вывести наименьший делитель отличный от 1.
#
#Примечание. Используйте оператор break при обнаружении делителя.

n = int(input())
for i in range (2, n+1): 
    if n %i == 0:        
        break            
print(i)


--106
На вход программе подается натуральное число nn. Напишите программу, которая выводит числа от 11 до nn включительно за исключением:

чисел от 55 до 99 включительно;
чисел от 1717 до 3737 включительно;
чисел от 7878 до 8787 включительно.
Формат входных данных
На вход программе подается одно натуральное число nn.
Формат выходных данных
Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.
Примечание. Используйте оператор continue

n = int(input())
for i in range (1, n+1): 
    if 5<=i<=9 or 17<=i<=37 or 78<=i<=87:       
        continue 
    print(i)
    i+=1


--107
Таблица-1
Дано натуральное число n (n≤ 9). Напишите программу, которая печатает таблицу размером n \times 3n×3 состоящую из данного числа (числа отделены одним пробелом).

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести таблицу размером n ×3 состоящую из данного числа.

Примечание. В конце строки может быть пробел.

n = int(input())
for i in range(n):
    print(n, n, n)


--108
Дано натуральное число n (n≤ 9). Напишите программу, которая печатает таблицу размером n \times 5n×5, где в ii-ой строке указано число ii (числа отделены одним пробелом).

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести таблицу размером n×5 в соответствии с условием.

Примечание. В конце строки может быть пробел.

n = int(input())
for i in range(1, n+1):
    print(i, i, i, i, i)


--109
Дано натуральное число n  (n≤ 9). Напишите программу, которая печатает таблицу сложения для всех чисел от 11 до nn в соответствии с примером.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести таблицу сложения для всех чисел от 11 до nn.

Примечание. В конце строки может быть пробел.

n = int(input())
for i in range(1, n+1):
    for j in range(1,10):
        print(i,'+',j,'=', i+j)
    print()


--110
Дано нечетное натуральное число nn. Напишите программу, которая печатает равнобедренный звездный треугольник с основанием, равным nn в соответствии с примером:

*
**
***
****
***
**
*
Формат входных данных
На вход программе подается одно нечетное натуральное число.

Формат выходных данных
Программа должна вывести треугольник в соответствии с условием.

Примечание. Используйте вложенный цикл for.

n = int(input())
centr = n // 2 + 1          
count = 0                   
for i in range(1, n + 1):
    if i > centr:           
        count -= 1          
    else:
        count += 1          
    
    for _ in range(count):  
        print('*', end='')
    print()


--111
Дано натуральное число nn. Напишите программу, которая печатает численный треугольник в соответствии с примером:

1
22
333
4444
55555
...
Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести треугольник в соответствии с условием.

Примечание. Используйте вложенный цикл for.

n = int(input())
for i in range(1, n+1):    
    for j in range(i):     
        print(i, end='')
    print()


--112
Дано натуральное число nn. Напишите программу, которая печатает численный треугольник с высотой равной nn, в соответствии с примером:

1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
16 17 18 19 20 21
...

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести треугольник в соответствии с условием.

Примечание. Используйте вложенный цикл for.

num = int(input())             
count = 0                      
for y in range(1, num + 1):    
    for x in range(y):         
        count += 1             
        print(count, end=' ')  
    print()  


--113
Дано натуральное число nn. Напишите программу, которая печатает численный треугольник с высотой равной nn, в соответствии с примером:

1
121
12321
1234321
123454321
...
Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести треугольник в соответствии с условием.

Примечание. Используйте вложенный цикл for.

n = int(input())

for i in range(1, n + 1):   
    count = 0                 
    for j in range(i):        
        count += 1            
        print(count, end='')  
    for k in range(i, 1, -1): 
        count -= 1            
        print(count, end='')  
    print() 



--114
На вход программе подается два натуральных числа aa и bb (a < ba< b). Напишите программу, которая находит натуральное число из отрезка [a; \, b][a;b] с максимальной суммой делителей.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной суммой делителей и сумму его делителей.
Примечание. Если таких чисел несколько, то выведите наибольшее из них.

a, b = int(input()), int(input())
num = 1
sum_div_max = 0
for i in range(a,b+1):
    sum_div = 0
    for j in range(1, i+1):
        if i % j == 0:
            sum_div = sum_div + j
        if sum_div >= sum_div_max:
            sum_div_max = sum_div
            num = i
print(num, sum_div_max)



--115
На вход программе подается натуральное число nn. Напишите программу, выводящую графическое изображение делимости чисел от 11 до nn включительно. В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести графическое изображение чисел от 11 до nn, каждое на отдельной строке.

n = int(input())
for i in range(1,n+1):
    sum_div = 0
    print(i, end = '')
    for j in range(1, i+1):
        if i % j == 0:
            sum_div += 1
    print("+"*sum_div)



--116
Цифровой корень
На вход программе подается натуральное число nn. Напишите программу, которая находит цифровой корень данного числа. Цифровой корень числа nn получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести цифровой корень введенного числа.

Примечание. Используйте вложенные циклы while.

n=int(input())      
while n>9:                    
    sum = 0    
    while (n > 0):
        last_digit = n % 10   # получаем последнюю цифру
        sum += last_digit      # суммируем  последнюю цифру 
        n = n // 10          # удаляем последнюю цифру из числа
    n = sum
print(n)


--117
Дано натуральное число nn. Напишите программу, которая выводит значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

Формат входных данных
На вход программе подается одно натуральное число.

Формат выходных данных
Программа должна вывести значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.

n = int(input())
sum = 0
for i in range(1, n+1):
    pr = 1
    for j in range(1, i+1):
           pr = pr*j
    sum = sum + pr
print(sum)


--118
Простые числа
На вход программе подается два натуральных числа aa и bb (a < ba< b). Напишите программу, которая находит все простые числа от aa до bb включительно.

Формат входных данных
На вход программе подаются два числа, каждое на отдельной строке.

Формат выходных данныхgit status
Программа должна вывести все простые числа от aa до bb включительно, каждое на отдельной строке.

Примечание. Число 11 простым не является.

a, b = int(input()), int(input())
for i in range(a, b+1):
    if i==1:
        continue
    for j in range(2, i):     
        if i % j == 0:        
            break             
    else:
        print(i) 


--119
На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран сумму чётных цифр этого числа или 0, если чётных цифр в записи нет.

n = int(input())
s = 0
while n > 0:
    if n % 2 == 0:
        s += n % 10
    n //= 10
print(s)


--120
На обработку поступает последовательность из 8 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^{12}10 
12.
 Нужно написать программу, которая выводит на экран количество делящихся нацело на 4 чисел в исходной последовательности и максимальное делящееся нацело на 4 число. Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO». 

n = 8
count = 0
maximum = -10**6 - 1
for i in range(1, n + 1):
    x = int(input())
    if x % 4 == 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')


--121
На обработку поступает последовательность из 4 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^8

 . Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности и максимальное нечётное число. Если нечётных чисел нет, требуется на экран вывести «NO»

    
    count = 0
maximum = -(10**4)
for i in range(4):
    x = int(input())
    if x % 2 != 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')
  

--122
На вход программе подается натуральное число n. Напишите программу, которая печатает звездную рамку размерами n×19.

n = int(input())
for i in range(1, n + 1):
    if i == 1 or i == n:
        print('*' * 19)
    else:
        print('*' + ' ' * 17 + '*')


--123
Дано натуральное число n (n>99). Напишите программу, которая определяет его третью (с начала) цифру.

n = int(input())
while n > 999:
    n //= 10
print(n % 10)



--124

Дано натуральное число. Напишите программу, которая вычисляет:
количество цифр 3 в нем;
сколько раз в нем встречается последняя цифра;
количество четных цифр;
сумму его цифр, больших пяти;
произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
сколько раз в нем встречается цифры 0 и 5 (всего суммарно).

n = int(input())
count_3 = 0
last_number = n % 10
count_as_last_number = 0
count_chetn = 0
sum_more5 = 0
multyply_more7 = 1
count_0_5 = 0
while n > 0:
    x = n % 10
    if x == 3:
        count_3 += 1
    if x == last_number:
        count_as_last_number += 1
    if x % 2 == 0:
        count_chetn += 1
    if x > 5:
        sum_more5 += x
    if x > 7:
        multyply_more7 *= x
    if x == 0 or x == 5:
        count_0_5 += 1
    n //= 10
print(count_3)
print(count_as_last_number)
print(count_chetn)
print(sum_more5)
print(multyply_more7)
print(count_0_5)


--125
На вход программе подается одна строка. Напишите программу, которая выводит элементы строки с индексами 0, 2, 4, ... в столбик.

Формат входных данных
На вход программе подается одна строка.

Формат выходных данных
Программа должна вывести элементы строки с индексами 0, 2, 4, ..., каждое на отдельной строке.

s = input()
for i in range (0, len(s), 2):
    print(s[i], end='\n')


--126
На вход программе подается одна строка. Напишите программу, которая выводит в столбик элементы строки в обратном порядке.

s=input()
for i in range(1,len(s)+1):
    print(s[-i])


--127
На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки.

a = input()
s = 0
for i in range(0,len(a)):
    s = s + int(a[i])
print(s)


--128
На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).

a = input()
r = 'Цифр нет'
for i in range(0,len(a)):
    if a[i] in '0123456789':
        r = 'Цифра'
        break
print(r)


--129
На вход программе подается одна строка. Напишите программу, которая определяет сколько раз в строке встречаются символы + и *.

s = input()
count_simb_p = 0
count_simb_z = 0
for i in range(len(s)):
    if s[i]=='+':
        count_simb_p += 1
    elif s[i]=='*':
        count_simb_z += 1
print('Символ + встречается', count_simb_p,'раз')
print('Символ * встречается', count_simb_z,'раз')


--130
На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.

s = input()
count = 0
for i in range(len(s)-1):
    if s[i] == s[i+1]:
        count+=1
print(count)


--131
На вход программе подается одна строка с буквами русского языка. Напишите программу, которая определяет количество гласных и согласных букв.

s = input()
gl, sogl = 0, 0
for i in range(len(s)):
    if s[i] in 'ауоыиэяюёеАУОЫИЭЯЮЁЕ':
        gl+=1
    elif s[i] in 'бвгджзйклмнпрстфхцчшщБВГДЖЗЙКЛМНПРСТФХЦЧШЩ':
        sogl+=1
print('Количество гласных букв равно', gl)
print('Количество согласных букв равно', sogl)


--132
На вход программе подается натуральное число, записанное в десятичной системе счисления. Напишите программу, которая переводит данное число в двоичную систему счисления.

decim = int(input())  
tw = ''   
while decim > 0:
    tw = str(decim % 2) + tw  
    decim = decim // 2
print(tw)


--133
На вход программе подается одно слово, записанное в нижнем регистре. Напишите программу, которая определяет является ли оно палиндромом.

s=input()
p = s[::-1]       
if s==p:          
    print('YES')
else:
    print('NO')


--134
На вход программе подается одна строка. Напишите программу, которая выводит:

общее количество символов в строке;
исходную строку повторенную 3 раза;
первый символ строки;
первые три символа строки;
последние три символа строки;
строку в обратном порядке;
строку с удаленным первым и последним символом.

s = input()
print(len(s))
print(s*3)
print(s[0])
print(s[:3])
print(s[-3:])
print(s[::-1])
print(s[1:-1])


--135
На вход программе подается одна строка. Напишите программу, которая выводит:

третий символ этой строки;
предпоследний символ этой строки;
первые пять символов этой строки;
всю строку, кроме последних двух символов;
все символы с четными индексами;
все символы с нечетными индексами;
все символы в обратном порядке;
все символы строки через один в обратном порядке, начиная с последнего.

s = input()
print(s[2])  #третий символ этой строки;
print(s[-2]) #предпоследний символ этой строки;
print(s[:5]) #первые пять символов этой строки;
print(s[:-2]) #всю строку, кроме последних двух символов;
print(s[::2]) #все символы с четными индексами;
print(s[1::2]) #все символы с нечетными индексами;
print(s[::-1]) #все символы в обратном порядке;
print(s[::-2]) #все символы строки через один в обратном порядке, начиная с последнего.


--136
На вход программе подается строка текста. Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.
s = input()
x = len(s)            
a = x // 2 + x % 2    # определяем номер символа, с которого начинется часть строки после разреза
print(s[a:] + s[:a])  # склеиваем части строки с этого символа до конца и с начала до этого символа


--137
На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом. Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.

s = input()
s1 = s.title()
if s == s1:
    print('YES')
else:
    print('NO')


--138
На вход программе подается строка текста. Напишите программу, которая определяет является ли оттенок текста хорошим или нет. Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести «YES» если текст имеет хороший оттенок и «NO» в противном случае.

Примечание. Текст содержащий хорош, ХОРОШ, Хорош, хОРОШ и т.д. имеет хороший оттенок.

s = input()
s = s.lower()
if 'хорош' in s:
    print('YES')
else:
    print('NO')


--139
На вход программе подается строка. Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.

s = input()                  
count = 0                         # Количество букв в нижнем регистре

for i in range(len(s)):       
    if s[i] != s[i].upper():      # Если символ не равен символу в верхнем регистре 
        count+=1                  
print(count) 


--140
На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу, которая подсчитывает количество слов в ней.

s = input()
print(s.count(' ')+1)


--141
На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин). Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.

s = input()
print('Аденин:', s.lower().count('а'))
print('Гуанин:', s.lower().count('г'))
print('Цитозин:', s.lower().count('ц'))
print('Тимин:', s.lower().count('т'))


--142
Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. На приемник ему поступает nn различных последовательностей кода Морзе. Декодировав их, он получает последовательности из цифр и строчного латинского алфавита, при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. Помогите определить Джиму количество сообщений от Оди.
n = int(input())
count = 0 
for i in range(n):
    s = input()
    if s.count('11') > 2:  
        count += 1       
print(count)  


--143
На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

s = input()
c = '0123456789'
count = 0
for i in c:
    count = count + s.count(i)
print(count)


--144
На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой .com или .ru.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

s = input()
if s.endswith('.com') or s.endswith('.ru'):
    print('YES')
else:
    print('NO')



--145
Самый частотный символ
На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется наиболее часто.

Формат входных данных 
На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского алфавита, а также цифры.

Формат выходных данных
Программа должна вывести символ, который появляется наиболее часто.

Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.

Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

s = input()             
c = 0                    
a = ''                   
for i in s:            
    if s.count(i)>=c:  
        c=s.count(i)   
        a=i           
print(a)


--146
На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

s = input()                            

if s.count('f') == 1:                  # если кол-во f 1 шт
    print(s.find('f'))                 # выводим индекс найденной f
elif s.count('f') > 1:                 # Если  f > 2
    print(s.find('f'), s.rfind('f'))   # выводим индекс первой и последней f
else:                                 
    print('NO')  


--147
На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.

s = input()                

a = s.find('h')            # первоое вхождение
b = s.rfind('h')           # последнее вхождение
c = s[a:b+1]               # текст между начальным и конечным индексом
print(s.replace(c, ''))    # замена на пустую строку


--148
На вход программе подаются два числа aa и bb. Напишите программу, которая для каждого кодового значения в диапазоне от aa до bb (включительно), выводит соответствующий ему символ из таблицы символов Unicode.

a, b = int(input()), int(input())            
for i in range(a, b + 1):    
    print(chr(i), end = " ") 


--149
На вход программе подается строка текста. Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести кодовые значения символов строки разделенных одним символом пробела.

s = input()   
for i in range(len(s)):       
    print(ord(s[i]), end=' ')  


--150
Легион Цезаря, созданный в 23 веке на основе Римской Империи не изменяет древним традициям и использует шифр Цезаря. Это их и подвело, ведь данный шифр очень простой. Однако в постапокалипсисе люди плохо знают все тонкости довоенного мира, поэтому ученые из НКР не могут понять как именно нужно декодировать данные сообщения. Напишите программу для декодирования этого шифра.

Формат входных данных
В первой строке дается число n  (1≤ n≤ 25) – сдвиг, во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.

Формат выходных данных
Программа должна вывести одну строку – декодированное сообщение. Обратите внимание, что нужно декодировать сообщение, а не закодировать.

n = int(input())                   #сдвиг
s = input()                     
                     
for i in range(len(s)):        
    word = ord(s[i]) - n            #  код  Unicode со смещением
    if word < 97:                   # если смещенный номер меньше номера строчных латинских букв
        word += 26                  # перебрасываем его в диапазон латинских букв
    print(chr(word), end='')   


--151
На вход программе подается строка текста. Напишите программу, которая удаляет из нее все символы с индексами кратными 3, то есть символы с индексами 0, 3, 6, ....

s =input()
for i in range(len(s)):
    if i%3 != 0:
        print(s[i], end = '')


--152
На вход программе подается строка текста. Напишите программу, которая выводит индекс второго вхождения буквы «f». Если буква «f» встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2.

s = input() 
if s.count('f')==1:
    print(-1)
elif s.count('f')==0:
    print(-2)
else:
    s = s.replace('f', '0' , 1) #заменяем первый найденный символ на 0. 
    print(s.find('f'))            #ищем индекс первого найденного


--153
На вход программе подается строка текста в которой буква «h» встречается как минимум два раза. Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов, заключенную между первым и последним вхождением буквы «h».

s = input()
s1 = s[:s.find('h')]
s2 = s[s.rfind('h'):s.find('h'):-1]
s3 = s[s.rfind('h'):]
print(s1 + s2 + s3)


--154
На вход программе подается одно число nn. Напишите программу, которая выводит список, состоящий из nn букв английского алфавита ['a', 'b', 'c', ...] в нижнем регистре.

n = int(input())
s = ''
for i in range(n):
    s = s + chr(97 + i)
print(list(s))


--155
Дополните приведенный код, чтобы он:

Вывел длину списка;
Вывел последний элемент списка;
Вывел список в обратном порядке (вспоминаем срезы);
Вывел YES если список содержит числа 5 и 17, и NO в противном случае;
Вывел список с удаленным первым и последним элементами.
Примечание. Каждый вывод осуществлять с новой строки.

numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
print(len(numbers))
print(numbers[len(numbers)-1])
print(numbers[::-1])
if 5 in numbers and 17 in numbers:
    print('YES')
else:
    print('NO')
del numbers[0]
del numbers[len(numbers)-1]
print(numbers)



--156
Напишите программу, выводящую следующий список:

['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
Формат выходных данных
Программа должна вывести указанный список.

Примечание. Последний элемент списка состоит из 26 символов z.

l = []
for i in range(26):
    l.append(chr(97 + i)*(i+1))
print(l)


--157
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая создает из указанных чисел список их кубов.

n = int(input())
l = []
for i in range(n):
    d = int(input())
    l.append(d**3)
print(l)


--158
На вход программе подается натуральное число nn. Напишите программу, которая создает список состоящий из делителей введенного числа.

n = int(input())
l=[]
for i in range(1,n+1):
    if n%i == 0:
        l.append(i)
print(l)


--159
На вход программе подается натуральное число n≥2, а затем n целых чисел. Напишите программу, которая создает из указанных чисел список, состоящий из сумм соседних чисел (00 и 11, 11 и 22, 22 и 33 и т.д.).

Формат входных данных
На вход программе подаются натуральное число n, а затем n целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести список, состоящий из сумм соседних чисел.

n = int(input())
a1 = int(input())
l = []
for i in range(n-1):
    a2 = int(input())
    l.append(a1 + a2)
    a1 = a2
print(l)


--160
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая создает из указанных чисел список, затем удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести список в соответствии с условием задачи.

Примечание. Используйте оператор del.

n=int(input())
l=[]
for i in range(n):
    a=int(input())
    l.append(a)
del l[1::2]
print(l)


--161
На вход программе подается натуральное число nn и nn строк, а затем число kk. Напишите программу, которая выводит kk-ую букву из введенных строк на одной строке без пробелов.

Формат входных данных
На вход программе подается натуральное число nn,  далее nn строк, каждая на отдельной строке. В конце вводится натуральное число kk – номер буквы (нумерация начинается с единицы).

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Если некоторые строки слишком короткие, и в них нет символа с заданным номером, то такие строки при выводе нужно игнорировать.


n = int(input())
l = []
for i in range(n):
    l.append(input())
k = int(input())    
st = ''
for j in l:
    if len(j) >= k:
        st += j[k - 1]
    
print(st)


--162
На вход программе подается натуральное число nn, а затем nn строк. Напишите программу, которая создает список из символов всех строк, а затем выводит его.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn строк, каждая на отдельной строке.

Формат выходных данных
Программа должна вывести список состоящий из символов всех введенных строк.

Примечание. В результирующем списке могут содержаться одинаковые символы.


n = int(input())
l = []
for i in range(n):
    l.extend(input())
print(l)


--163
На вход программе подается натуральное число n, а затем nn целых чисел. Напишите программу, которая для каждого введенного числа xx выводит значение функции f(x) = x^2 + 2x + 1f(x)
каждое на отдельной строке.

Формат входных данных
На вход программе подаются натуральное число n, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести сначала введенные числа, затем пустую строку, а затем соответствующие значения функции.

n = int(input())
l = []
for i in range(n):
    x = int(input())
    l.append(x)
print(*l, sep='\n')
for i in l:
    print(i*i+2*i+1)



--164
При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.

На вход программе подается натуральное число n, а затем n различных натуральных чисел. Напишите программу, которая удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.

Формат входных данных
На вход программе подаются натуральное число n, а затем n различных натуральных чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

n = int(input())
l = []
li = []
for i in range(n):
    l.append(int(input()))

for i in range(n):
    if l[i]!=min(l) and l[i]!=max(l):
        li.append(l[i])
print(*li, sep='\n')


--165
На вход программе подается натуральное число nn, а затем nn строк. Напишите программу, которая выводит только уникальные строки, в том же порядке, в котором они были введены.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn строк, каждая на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Примечание. Считайте, что все строки состоят из строчных символов.

n = int(input())
l = []
for i in range(n):
    a = input()
    if a not in l:
        l.append(a)
print(*l, sep= '\n')


--166
На вход программе подается натуральное число nn, затем nn строк, затем еще одна строка — поисковый запрос. Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.

Формат входных данных
На вход программе подаются натуральное число nn — количество строк, затем сами строки в указанном количестве, затем один поисковый запрос.

Формат выходных данных
Программа должна вывести все введенные строки, в которых встречается поисковый запрос.

Примечание. Поиск не должен быть чувствителен к регистру символов.


n = int(input())
l = []
for i in range(n):
    l.append(input())
z = input()
for i in range (n):
    if z.upper()  in l[i].upper():
        print(l[i])


#--167
#Google search - 2 🌶️🌶️
#На вход программе подается натуральное число nn, затем nn строк, затем число kk — количество поисковых запросов, затем kk строк — поисковые запросы. Напишите программу, которая выводит все введенные строки, в которых встречаются все поисковые запросы.
#
#Формат входных данных
#На вход программе подаются натуральное число nn — количество строк, затем сами строки в указанном количестве, затем число kk, затем сами поисковые запросы.

#Формат выходных данных
#Программа должна вывести все введенные строки, в которых встречаются все поисковые запросы.
#
#Примечание. Поиск не должен быть чувствителен к регистру символов.

n = int(input())
l = []
for i in range(n):
    l.append(input())
k = int(input())
zap = []
for i in range(k):
    zap.append(input())

for i in range (n):
    count = 0
    for j in range (k):
        if zap[j].lower() in l[i].lower():
            count+=1
    if count == k:
        print(l[i])


#--168
На вход программе подается натуральное число nn, а затем nn целых чисел. Напишите программу, которая сначала выводит все отрицательные числа, затем нули, а затем все положительные числа, каждое на отдельной строке. Числа должны быть выведены в том же порядке, в котором они были введены.

Формат входных данных
На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

n = int(input())
neg = []
pos = []
nul = []
for i in range(n):
    a=int(input())
    if a < 0:
        neg.append(a)
    elif a == 0:
        nul.append(a)
    elif a > 0:
        pos.append(a)
print(*neg, sep = '\n')
print(*nul, sep = '\n')
print(*pos, sep = '\n')



#--169
#На вход программе подается строка текста. Напишите программу, которая выводит слова введенной строки в столбик.
#
#Формат входных данных
#На вход программе подается строка текста.
#
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

s = input()
print(*s.split(), sep = '\n')

#--170
#Инициалы
#На вход программе подается строка текста, содержащая имя, отчество и фамилию человека. Напишите программу, которая выводит инициалы человека.
#
#Формат входных данных
#На вход программе подается строка текста, содержащая имя, отчество и фамилию человека.
#
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

s = input()
fio = s.split()
for i in fio:
    print(i[0], end='.')


#--171
#Windows OS
#В операционной системе Windows полное имя файла состоит из буквы диска, после которого ставится двоеточие и символ  "\",  затем через такой же символ перечисляются подкаталоги (папки), в которых находится файл, в конце пишется имя файла (C:\Windows\System32\calc.exe).
#На вход программе подается одна строка с корректным именем файла в операционной системе Windows. Напишите программу, которая разбирает строку на части, разделенные символом "\". Каждую часть вывести в отдельной строке.
#
#Формат входных данных
#На вход программе подается одна строка.
#
#Формат выходных данных
#Программа должна вывести текст в соответствии с условием задачи.

s = input()
print(*s.split('\\'), sep = '\n')


#--172
#На вход программе подается строка текста, содержащая целые числа. Напишите программу, которая по заданным числам строит столбчатую диаграмму.
#
#Формат входных данных
#На вход программе подается строка текста, содержащая целые числа, разделенных символом пробела.
#
#Формат выходных данных
#Программа должна вывести столбчатую диаграмму.

s = input()
for i in s.split():
    print('+'*int(i))


#--173
#Корректный ip-адрес
#На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой. Напишите программу, которая определяет является ли введенная строка текста корректным ip-адресом.
#
#Формат входных данных
#На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой.
#
#Формат выходных данных
#Программа должна вывести «ДА», если введеная строка является корректным ip-адресом, и «НЕТ» — в противном случае.
#
#Примечание. ip-адрес является корректным, если все 4 числа находятся в диапазоне от 0 до 255 включительно.

s = input()
count = 0
for i in s.split('.'):
    if 0 <= int(i) <= 255:
        count+=1
if count == 4:
    print('ДА')
else:
    print('НЕТ')



#--174
#На вход программе подается строка текста и строка разделитель. Напишите программу, которая вставляет указанный разделитель между каждым символом введенной строки текста.
#
#Формат входных данных
#На вход программе подается строка текста и строка разделитель, каждая на отдельной строке

s, razd = input(), input()
print(*s, sep = razd)


#--175
#На вход программе подается строка текста, содержащая натуральные числа. Из данной строки формируется список чисел. Напишите программу, которая подсчитывает, сколько в полученном списке пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
#
#Формат входных данных
#На вход программе подается строка текста, содержащая натуральные числа, отделенные символом пробела.
#
#Формат выходных данных
#Программа должна вывести одно число – количество пар элементов, равных друг другу.

s = input()
s = s.split(' ')
count = 0
for i in range(len(s)):
    for j in range(i+1, len(s)):
        if s[i] == s[j]:
            count +=1
print(count)


#--176
#На вход программе подается строка текста, содержащая различные натуральные числа. Из данной строки формируется список чисел. Напишите программу, которая меняет местами минимальный и максимальный элемент этого списка.
#
#Формат входных данных
#На вход программе подается строка текста, содержащая различные натуральные числа, разделенные символом пробела.
#
#Формат выходных данных
#Программа должна вывести строку текста в соответствии с условием задачи.
#
#Примечание. Используйте подходящие встроенные функции и списочные методы.

s = input()
li = s.split()
for i in range(len(li)):
    li[i] = int(li[i])
d_max = max(li)
d_min = min(li)
i_min = li.index(min(li))
i_max = li.index(max(li))
li[i_min] = d_max
li[i_max] = d_min
print(*li, sep = ' ')


#--177
#Дополните приведенный код, чтобы он:
#
#Заменил второй элемент списка на 17;
#Добавил числа 4, 5 и 6 в конец списка;
#Удалил первый элемент списка;
#Удвоил список;
#Вставил число 25 по индексу 3;
#Вывел список, с помощью функции print()

numbers = [8, 9, 10, 11]
numbers[1] = 17
numbers.extend([4, 5, 6])
del numbers[0]
numbers*=2
numbers.insert(3, 25)               
print(numbers)


#--178
#На вход программе подается строка, содержащая английский текст. Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.
#
#Формат входных данных
#На вход программе подается строка, содержащая английский текст. Слова текста разделены символом пробела.
#
#Формат выходных данных
#Программа должна вывести общее количество артиклей 'a', 'an', 'the' вместе с поясняющим текстом.
#
#Примечание. Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'

s = input()
li = s.lower().split()
count = li.count('a')+li.count('an')+li.count('the')
print('Общее количество артиклей:', count)


#--179
#Взлом Братства Стали 🌶️
#Немалоизвестный в пустошах Мохаве Курьер забрел в Хидден-Вэли – секретный бункер Братства Стали, и любезно соглашается помочь им в решении их проблем. Одной из такой проблем являлся странный компьютерный вирус, который проявлялся в виде появления комментариев к программам на терминалах Братства Стали. Известно, что программисты Братства никогда не оставляют комментарии к коду, и пишут программы на Python, поэтому удаление всех этих комментариев никак не навредит им. Помогите писцу Ибсену удалить все комментарии из программы.
#
#Формат входных данных
#На первой строке вводится символ решётки и сразу же натуральное число 
#n — количество строк в программе, не считая первой. Далее следует 
#n строк кода.
#
#Формат выходных данных
#Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк. Пустую строку вместо первой строки ввода выводить не надо.

n=input()
n=n[1:]
for i in range(int(n)):
    s = input()
    if s.find('#') >0:
        s = s[:s.find('#')]
    print(s.rstrip())


#--180
#Сортировка чисел
#На вход программе подается строка текста, содержащая целые числа. Из данной строки формируется список чисел. Напишите программу, которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию. 
#
#Формат входных данных
#На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.
#
#Формат выходных данных
#Программа должна вывести две строки текста в соответствии с условием задачи.

lst = input().split()
ls = []
for i in lst:
    ls.append(int(i))
ls.sort()
print(*ls)
ls.sort(reverse = True)
print(*ls)


#--181
#Дополните приведенный код, используя списочное выражение, так чтобы получить список всех чисел палиндромов от 
#100 до 1000.

palindromes = [i for i in range(100,1001) if str(i)==str(i)[::-1]]
print(palindromes)


#--182
#